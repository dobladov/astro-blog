<style>
  aside {
    position: relative;
    padding-top: 8.5rem;
    margin: 0 auto;
    bottom: 0;
    z-index: -1;
  }

  @media screen and (min-width: 768px) {
    aside {
      position: fixed;
      right: -3.5rem;
      margin-right: 6rem;
    }

    @media not (prefers-reduced-motion) {
      aside {
        animation: moveUp 1s ease-out;
      }
      @keyframes moveUp {
        from {
          bottom: -58px;
        }
      }
    }
  }

  img {
    min-width: 16.9rem;
    max-width: 90vw;
  }

  #orb {
    border-radius: 50%;
    bottom: 0;
    width: 16.9rem;
    height: 16.9rem;
    max-width: 16.9rem;
    max-height: 16.9rem;
  }

  .orbContainer {
    position: absolute;
    left: 0;
    border-radius: 50%;
    max-width: 20rem;
    right: 2rem;
    bottom: 14rem;
    opacity: 0.8;
    box-shadow: -3px -2px 5px -1px var(--text);
    width: 16.9rem;
    height: 16.9rem;
    max-width: 16.9rem;
    max-height: 16.9rem;
  }

  .orbContainer:after {
    content: "";
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
    z-index: 1;
    border-radius: 50%;
    box-shadow: 7px 6px 15px 13px #3a3a3a94 inset;
  }

  body[data-js="false"] .orbContainer:before {
    content: "";
    border-radius: 50%;
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0;
    right: 0;
    z-index: 1;
    background: radial-gradient(
        farthest-corner at top,
        #ffffff 0%,
        #ffffff 4%,
        #e4e4e4 12.25%,
        #7c7c7c 31.25%,
        #b1b1b1 50%
      )
      top right/200% 200%;
    animation:
      rotation 5s infinite alternate,
      appear 10s;
  }

  .finger {
    left: 0;
    position: absolute;
    z-index: 1;
    bottom: 6px;
  }

  @keyframes appear {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes rotation {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
</style>

<aside>
  <img class="hand" src="/hand.png" alt="Hand" />
  <img class="finger" src="/finger.png" alt="Finger" />
  <div class="orbContainer">
    <canvas id="orb"></canvas>
  </div>
</aside>

<script>
  import { map } from "#astro/components/utils";
  class Perlin {
    gradients;
    memory;

    constructor() {
      this.seed();
    }

    rand_vect() {
      let theta = Math.random() * 2 * Math.PI;
      return { x: Math.cos(theta), y: Math.sin(theta) };
    }

    dot_prod_grid(x: number, y: number, vx: number, vy: number) {
      let g_vect;
      let d_vect = { x: x - vx, y: y - vy };
      if (this.gradients[[vx, vy]]) {
        g_vect = this.gradients[[vx, vy]];
      } else {
        g_vect = this.rand_vect();
        this.gradients[[vx, vy]] = g_vect;
      }
      return d_vect.x * g_vect.x + d_vect.y * g_vect.y;
    }

    smootherstep(x: number) {
      return 6 * x ** 5 - 15 * x ** 4 + 10 * x ** 3;
    }

    interp(x: number, a: number, b: number) {
      return a + this.smootherstep(x) * (b - a);
    }

    seed() {
      this.gradients = {};
      this.memory = {};
    }

    get(x: number, y: number) {
      if (this.memory.hasOwnProperty([x, y])) return this.memory[[x, y]];
      let xf = Math.floor(x);
      let yf = Math.floor(y);
      //interpolate
      let tl = this.dot_prod_grid(x, y, xf, yf);
      let tr = this.dot_prod_grid(x, y, xf + 1, yf);
      let bl = this.dot_prod_grid(x, y, xf, yf + 1);
      let br = this.dot_prod_grid(x, y, xf + 1, yf + 1);
      let xt = this.interp(x - xf, tl, tr);
      let xb = this.interp(x - xf, bl, br);
      let v = this.interp(y - yf, xt, xb);
      this.memory[[x, y]] = v;
      return v;
    }
  }

  const canvas = document.getElementById("orb");
  const ctx = canvas.getContext("2d");

  const perlin = new Perlin();
  const totalPoints = 100;
  const noiseScale = 0.01;
  const particles: Array<{ x: string; y: string }> = [];
  const dotScale = 2;
  const displacement = 5;
  let leftToRight: number | null;
  let mousePos = {
    x: 0,
    y: 0,
  };

  window.addEventListener(
    "deviceorientation",
    (event) => {
      leftToRight = event.gamma;
    },
    true
  );

  window.addEventListener("mousemove", (event) => {
    mousePos = { x: event.clientX, y: event.clientY };
  });

  window.addEventListener("mousedown", (e) => {
    perlin.seed();
  });

  /* Set the size of the canvas for retina displays */
  const scale = () => {
    const width = 500;
    const height = 500;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    const scale = window.devicePixelRatio;
    canvas.width = Math.floor((width * scale) / 2);
    canvas.height = Math.floor((height * scale) / 2);
  };

  const random = (min = 0, max = 0) => {
    return Math.floor(Math.random() * (max - min) + min);
  };

  scale();
  /* Generate the initial random particles */
  for (let i = 0; i < totalPoints; i++) {
    particles.push({
      x: random(canvas.width),
      y: random(canvas.height),
    });
  }

  // Indicates if the point is on the screen
  const onScreen = (v) => {
    return v.x >= 0 && v.x <= canvas.width && v.y >= 0 && v.y <= canvas.height;
  };

  const draw = () => {
    const positionInfo = canvas.getBoundingClientRect();

    // Clear the canvas with a transparent rect
    ctx.fillStyle = "rgba(40, 40, 40, 0.03)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    for (let i = 0; i < totalPoints; i++) {
      let p = particles[i];
      let n = map(perlin.get(p.x * noiseScale, p.y * noiseScale), -1, 1, 0, 1);
      let a = Math.PI * 2 * n;

      // Draw the points slightly displaced
      ctx.fillStyle = "rgb(255, 0, 0)";
      ctx.fillRect(p.x + displacement, p.y, dotScale, dotScale);
      ctx.fillStyle = "rgb(0, 255, 0)";
      ctx.fillRect(p.x, p.y, dotScale, dotScale);
      ctx.fillStyle = "rgb(0, 0, 255)";
      ctx.fillRect(p.x - displacement, p.y, dotScale, dotScale);

      // Invert the direction
      if (
        leftToRight < 0 ||
        mousePos.x < positionInfo.width / 2 + positionInfo.left
      ) {
        p.x += Math.cos(a) * 2;
        p.y += Math.sin(a);
      } else {
        p.x -= Math.cos(a) * 2;
        p.y -= Math.sin(a) * 2;
      }

      // Move the point to a random position if it's out of the screen
      if (!onScreen(p)) {
        p.x = random(canvas.width);
        p.y = random(canvas.height);
      }
    }

    window.requestAnimationFrame(draw);
  };

  requestAnimationFrame(draw);
</script>
